QUICKSORT

A[p,r]  Partition(q) + Recursive

Partition(A,p,r) -> q
1. 	chose a pivot element A[r]
2. 	make elements in A[p,q-1] <= A[r]
		 elements in A[q+1,r] > A[r]
	=>	introduce i(p-1, count the number of element which <= A[r]) , j(p -> r-1)

		p ..(a).. i ..(b).. j ..(c).. r-1 r
		a <= A[r]
		b > A[r]
		c unknown




c code
void QUICKSORT(int A[],int p, int r){
	if(p<r){
		int q = PARTITION(A,p,r);
		QUICKSORT(A,p,q-1);
		QUICKSORT(A,q+1,r);
	}
}
int PARTITION(int A[],int p,int r){
	int x = A[r];
	int i= p-1;
	for(int j = p;j < r;j++){
		if(A[j] <= x){
			i++;
			swap(A[i],A[j]);
		}
	}
	swap(A[i+1],A[r]);
	printf("%d",i+1);
	return i+1;
}

//2018.2.27 