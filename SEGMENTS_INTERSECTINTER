#include<cstdio>
#include<utility>
#define min(x,y) x<y?x:y
#define max(x,y) x>y?x:y
using namespace std;
typedef pair<int,int>point;
bool SEGMENTS_INTERSECT(point p1,point p2,point p3,point p4);
bool ON_SEGMENT(point pi,point pj,point pk);
int DIRECTION(point pi,point pj,point pk);
point operator-(point p1,point p2){
	point p3;
	p3.first=p1.first-p2.first;
	p3.second=p1.second-p2.second;
	return p3;
}
int operator*(point p1,point p2){
	return (p1.first*p2.second - p1.second*p2.first);
}
bool SEGMENTS_INTERSECT(point p1,point p2,point p3,point p4){
	bool d1=DIRECTION(p3,p4,p1),d2=DIRECTION(p3,p4,p2),d3=DIRECTION(p1,p2,p3),d4=DIRECTION(p1,p2,p4);
	if((d1<0 && d2>0) || (d1>0 && d2<0) || (d3>0 && d4>0) || (d3<0 && d4>0)) return true;
	if(d1==0 && ON_SEGMENT(p3,p4,p1)) return true;
	if(d2==0 && ON_SEGMENT(p3,p4,p2)) return true;
	if(d3==0 && ON_SEGMENT(p1,p2,p3)) return true;
	if(d4==0 && ON_SEGMENT(p1,p2,p4)) return true;
	return false;
}
int DIRECTION(point pi,point pj,point pk){
	return (pk-pi)*(pj-pi);
}
bool ON_SEGMENT(point pi,point pj,point pk){
	return (pk.first>=min(pi.first,pj.first) && pk.first<=max(pi.first,pj.first)) && (pk.second>=min(pi.second,pj.second) && pk.second<=max(pi.second,pj.second));
}
int main(){
	point p[10];
	for(int i=0;i<4;i++){
		scanf("%d%d",&p[i].first,&p[i].second);
	}
	printf("%d\n",SEGMENTS_INTERSECT(p[0],p[1],p[2],p[3]));
	
}
